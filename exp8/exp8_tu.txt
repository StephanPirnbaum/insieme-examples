TU(
	Types:
		,
	Globals:
		,
	Initializer:
		,
	Functions:
		IMP_main : (()->int<4>) => AP(rec IMP_main.{IMP_main=fun() {{merge(parallel(job (bind(){rec _ins_omp_parallel_0.{_ins_omp_parallel_0=fun() {{IMP_printf(rec ptr_from_array.{ptr_from_array=fun(ref<ref<array<'a,'s>,'c,'v,plain>,f,f,plain> v0) {return tuple(ref_reinterpret(ref_deref(v0), type<array<'a,inf>>),0);}}("Thread: #(%d)"), varlist_pack(tuple(rec num_cast.{num_cast=fun(ref<'a,f,f,plain> v0, ref<type<'b>,f,f,plain> v1) {return cast<'b>(ref_deref(v0));}}(get_thread_id(0), type<int<4>>)))); rec barrier.{barrier=fun(ref<threadgroup,f,f,plain> v0) {redistribute(ref_deref(v0), 0, rec _.{_=fun(ref<ref<array<int<4>,inf>,f,f,plain>,f,f,plain> v0, ref<uint<8>,f,f,plain> v1, ref<uint<8>,f,f,plain> v2) {}});}}(get_thread_group(0)); {{{rec pfor.{pfor=fun(ref<threadgroup,f,f,plain> v0, ref<int<'a>,f,f,plain> v1, ref<int<'a>,f,f,plain> v2, ref<int<'a>,f,f,plain> v3, ref<((int<'a>,int<'a>,int<'a>)=>'b),f,f,plain> v4) {ref_deref(v4)(ref_deref(v1), ref_deref(v2), ref_deref(v3));}}(get_thread_group(0), 0, rec num_cast.{num_cast=fun(ref<'a,f,f,plain> v0, ref<type<'b>,f,f,plain> v1) {return cast<'b>(ref_deref(v0));}}(get_thread_id(0), type<int<4>>), 1, bind(v0,v1,v2){rec _.{_=fun(ref<int<4>,f,f,plain> v0, ref<int<4>,f,f,plain> v1, ref<int<4>,f,f,plain> v2) {for(int<4> v3 = ref_deref(v0) .. ref_deref(v1) : ref_deref(v2)) {IMP_printf(rec ptr_from_array.{ptr_from_array=fun(ref<ref<array<'a,'s>,'c,'v,plain>,f,f,plain> v0) {return tuple(ref_reinterpret(ref_deref(v0), type<array<'a,inf>>),0);}}("First Loop, Thread: #(%d), Iteration: #(%d)"), varlist_pack(tuple(rec num_cast.{num_cast=fun(ref<'a,f,f,plain> v0, ref<type<'b>,f,f,plain> v1) {return cast<'b>(ref_deref(v0));}}(get_thread_id(0), type<int<4>>),v3)));};}}(v0, v1, v2)}); rec barrier.{barrier=fun(ref<threadgroup,f,f,plain> v0) {redistribute(ref_deref(v0), 0, rec _.{_=fun(ref<ref<array<int<4>,inf>,f,f,plain>,f,f,plain> v0, ref<uint<8>,f,f,plain> v1, ref<uint<8>,f,f,plain> v2) {}});}}(get_thread_group(0));};};}; {{{rec pfor.{pfor=fun(ref<threadgroup,f,f,plain> v0, ref<int<'a>,f,f,plain> v1, ref<int<'a>,f,f,plain> v2, ref<int<'a>,f,f,plain> v3, ref<((int<'a>,int<'a>,int<'a>)=>'b),f,f,plain> v4) {ref_deref(v4)(ref_deref(v1), ref_deref(v2), ref_deref(v3));}}(get_thread_group(0), 0, rec num_cast.{num_cast=fun(ref<'a,f,f,plain> v0, ref<type<'b>,f,f,plain> v1) {return cast<'b>(ref_deref(v0));}}(get_thread_id(0), type<int<4>>), 1, bind(v3,v4,v5){rec _.{_=fun(ref<int<4>,f,f,plain> v0, ref<int<4>,f,f,plain> v1, ref<int<4>,f,f,plain> v2) {for(int<4> v3 = ref_deref(v0) .. ref_deref(v1) : ref_deref(v2)) {IMP_printf(rec ptr_from_array.{ptr_from_array=fun(ref<ref<array<'a,'s>,'c,'v,plain>,f,f,plain> v0) {return tuple(ref_reinterpret(ref_deref(v0), type<array<'a,inf>>),0);}}("Second Loop, Thread: #(%d), Iteration: #(%d)"), varlist_pack(tuple(rec num_cast.{num_cast=fun(ref<'a,f,f,plain> v0, ref<type<'b>,f,f,plain> v1) {return cast<'b>(ref_deref(v0));}}(get_thread_id(0), type<int<4>>),v3)));};}}(v3, v4, v5)});};};}; IMP_printf(rec ptr_from_array.{ptr_from_array=fun(ref<ref<array<'a,'s>,'c,'v,plain>,f,f,plain> v0) {return tuple(ref_reinterpret(ref_deref(v0), type<array<'a,inf>>),0);}}("Done, Thread: #(%d)"), varlist_pack(tuple(rec num_cast.{num_cast=fun(ref<'a,f,f,plain> v0, ref<type<'b>,f,f,plain> v1) {return cast<'b>(ref_deref(v0));}}(get_thread_id(0), type<int<4>>))));}; merge_all();}}()})));}; return 0;}}),
	Entry Points:
		{},
	is C++:
		1
)