TU(
	Types:
		,
	Globals:
		,
	Initializer:
		,
	Functions:
		IMP_main : (()->int<4>) => AP(rec IMP_main.{IMP_main=fun() {ref<int<4>,t,f,plain> v1 = 100; ref<array<real<8>,100>,f,f,plain> v2 = ref_decl(type<ref<array<real<8>,100>,f,f,plain>>); {merge(parallel(job (bind(){rec _ins_omp_parallel_0.{_ins_omp_parallel_0=fun(ref<ref<int<4>,t,f,plain>,f,f,plain> v0, ref<ref<array<real<8>,100>,f,f,plain>,f,f,plain> v1) {{{for(int<4> v2 = 0 .. ref_deref(ref_deref(v0)) : 1) {ref_assign(rec ptr_subscript.{ptr_subscript=fun(ref<(ref<array<'a,inf>,'c,'v,plain>,int<8>),f,f,plain> v0, ref<int<8>,f,f,plain> v1) {return rec ref_array_element.{ref_array_element=fun(ref<ref<array<'a,'s>,'c,'v,plain>,f,f,plain> v0, ref<int<8>,f,f,plain> v1) {return ref_narrow(ref_deref(v0), dp_element(dp_root(type<array<'a,'s>>), ref_deref(v1)));}}(tuple_member_access(ref_deref(v0), 0, type<ref<array<'a,inf>,'c,'v,plain>>), int_add(tuple_member_access(ref_deref(v0), 1, type<int<8>>), ref_deref(v1)));}}(rec ptr_from_array.{ptr_from_array=fun(ref<ref<array<'a,'s>,'c,'v,plain>,f,f,plain> v0) {return tuple(ref_reinterpret(ref_deref(v0), type<array<'a,inf>>),0);}}(ref_deref(v1)), v2), rec num_cast.{num_cast=fun(ref<'a,f,f,plain> v0, ref<type<'b>,f,f,plain> v1) {return cast<'b>(ref_deref(v0));}}(rec num_cast.{num_cast=fun(ref<'a,f,f,plain> v0, ref<type<'b>,f,f,plain> v1) {return cast<'b>(ref_deref(v0));}}(get_thread_id(0), type<int<4>>), type<real<8>>));};};}; merge_all();}}(v1, v2)})));}; ref<int<4>,f,f,plain> v26 = 0; ref<int<4>,f,f,plain> v27 = 0; ref<int<4>,f,f,plain> v28 = 0; ref<int<4>,f,f,plain> v29 = 0; {merge(parallel(job (bind(){rec _ins_omp_parallel_1.{_ins_omp_parallel_1=fun(ref<ref<int<4>,t,f,plain>,f,f,plain> v0, ref<ref<array<real<8>,100>,f,f,plain>,f,f,plain> v1, ref<ref<int<4>,f,f,plain>,f,f,plain> v2, ref<ref<int<4>,f,f,plain>,f,f,plain> v3, ref<ref<int<4>,f,f,plain>,f,f,plain> v4, ref<ref<int<4>,f,f,plain>,f,f,plain> v5) {{{for(int<4> v6 = 0 .. ref_deref(ref_deref(v0)) : 1) {if(real_eq(ref_deref(rec ptr_subscript.{ptr_subscript=fun(ref<(ref<array<'a,inf>,'c,'v,plain>,int<8>),f,f,plain> v0, ref<int<8>,f,f,plain> v1) {return rec ref_array_element.{ref_array_element=fun(ref<ref<array<'a,'s>,'c,'v,plain>,f,f,plain> v0, ref<int<8>,f,f,plain> v1) {return ref_narrow(ref_deref(v0), dp_element(dp_root(type<array<'a,'s>>), ref_deref(v1)));}}(tuple_member_access(ref_deref(v0), 0, type<ref<array<'a,inf>,'c,'v,plain>>), int_add(tuple_member_access(ref_deref(v0), 1, type<int<8>>), ref_deref(v1)));}}(rec ptr_from_array.{ptr_from_array=fun(ref<ref<array<'a,'s>,'c,'v,plain>,f,f,plain> v0) {return tuple(ref_reinterpret(ref_deref(v0), type<array<'a,inf>>),0);}}(ref_deref(v1)), v6)), rec num_cast.{num_cast=fun(ref<'a,f,f,plain> v0, ref<type<'b>,f,f,plain> v1) {return cast<'b>(ref_deref(v0));}}(0, type<real<8>>))) {rec atomic_fetch_and_add.{atomic_fetch_and_add=fun(ref<ref<'a,f,'v,plain>,f,f,plain> v0, ref<'a,f,f,plain> v1) {return rec atomic.{atomic=fun(ref<ref<'a,f,'v,plain>,f,f,plain> v0, ref<(('a)=>bool),f,f,plain> v1, ref<(('a)=>'a),f,f,plain> v2) {'a v3 = ref_deref(ref_deref(v0)); if(ref_deref(v1)(ref_deref(ref_deref(v0)))) {ref_assign(ref_deref(v0), ref_deref(v2)(ref_deref(ref_deref(v0))));} else {}; return v3;}}(ref_deref(v0), bind(v2){rec id.{id=fun(ref<'a,f,f,plain> v0) {return ref_deref(v0);}}(true)}, bind(v3){gen_add(v3, ref_deref(v1))});}}(ref_deref(v2), 1);} else {if(real_eq(ref_deref(rec ptr_subscript.{ptr_subscript=fun(ref<(ref<array<'a,inf>,'c,'v,plain>,int<8>),f,f,plain> v0, ref<int<8>,f,f,plain> v1) {return rec ref_array_element.{ref_array_element=fun(ref<ref<array<'a,'s>,'c,'v,plain>,f,f,plain> v0, ref<int<8>,f,f,plain> v1) {return ref_narrow(ref_deref(v0), dp_element(dp_root(type<array<'a,'s>>), ref_deref(v1)));}}(tuple_member_access(ref_deref(v0), 0, type<ref<array<'a,inf>,'c,'v,plain>>), int_add(tuple_member_access(ref_deref(v0), 1, type<int<8>>), ref_deref(v1)));}}(rec ptr_from_array.{ptr_from_array=fun(ref<ref<array<'a,'s>,'c,'v,plain>,f,f,plain> v0) {return tuple(ref_reinterpret(ref_deref(v0), type<array<'a,inf>>),0);}}(ref_deref(v1)), v6)), rec num_cast.{num_cast=fun(ref<'a,f,f,plain> v0, ref<type<'b>,f,f,plain> v1) {return cast<'b>(ref_deref(v0));}}(1, type<real<8>>))) {rec atomic_fetch_and_add.{atomic_fetch_and_add=fun(ref<ref<'a,f,'v,plain>,f,f,plain> v0, ref<'a,f,f,plain> v1) {return rec atomic.{atomic=fun(ref<ref<'a,f,'v,plain>,f,f,plain> v0, ref<(('a)=>bool),f,f,plain> v1, ref<(('a)=>'a),f,f,plain> v2) {'a v3 = ref_deref(ref_deref(v0)); if(ref_deref(v1)(ref_deref(ref_deref(v0)))) {ref_assign(ref_deref(v0), ref_deref(v2)(ref_deref(ref_deref(v0))));} else {}; return v3;}}(ref_deref(v0), bind(v2){rec id.{id=fun(ref<'a,f,f,plain> v0) {return ref_deref(v0);}}(true)}, bind(v3){gen_add(v3, ref_deref(v1))});}}(ref_deref(v3), 1);} else {if(real_eq(ref_deref(rec ptr_subscript.{ptr_subscript=fun(ref<(ref<array<'a,inf>,'c,'v,plain>,int<8>),f,f,plain> v0, ref<int<8>,f,f,plain> v1) {return rec ref_array_element.{ref_array_element=fun(ref<ref<array<'a,'s>,'c,'v,plain>,f,f,plain> v0, ref<int<8>,f,f,plain> v1) {return ref_narrow(ref_deref(v0), dp_element(dp_root(type<array<'a,'s>>), ref_deref(v1)));}}(tuple_member_access(ref_deref(v0), 0, type<ref<array<'a,inf>,'c,'v,plain>>), int_add(tuple_member_access(ref_deref(v0), 1, type<int<8>>), ref_deref(v1)));}}(rec ptr_from_array.{ptr_from_array=fun(ref<ref<array<'a,'s>,'c,'v,plain>,f,f,plain> v0) {return tuple(ref_reinterpret(ref_deref(v0), type<array<'a,inf>>),0);}}(ref_deref(v1)), v6)), rec num_cast.{num_cast=fun(ref<'a,f,f,plain> v0, ref<type<'b>,f,f,plain> v1) {return cast<'b>(ref_deref(v0));}}(2, type<real<8>>))) {rec atomic_fetch_and_add.{atomic_fetch_and_add=fun(ref<ref<'a,f,'v,plain>,f,f,plain> v0, ref<'a,f,f,plain> v1) {return rec atomic.{atomic=fun(ref<ref<'a,f,'v,plain>,f,f,plain> v0, ref<(('a)=>bool),f,f,plain> v1, ref<(('a)=>'a),f,f,plain> v2) {'a v3 = ref_deref(ref_deref(v0)); if(ref_deref(v1)(ref_deref(ref_deref(v0)))) {ref_assign(ref_deref(v0), ref_deref(v2)(ref_deref(ref_deref(v0))));} else {}; return v3;}}(ref_deref(v0), bind(v2){rec id.{id=fun(ref<'a,f,f,plain> v0) {return ref_deref(v0);}}(true)}, bind(v3){gen_add(v3, ref_deref(v1))});}}(ref_deref(v4), 1);} else {if(real_eq(ref_deref(rec ptr_subscript.{ptr_subscript=fun(ref<(ref<array<'a,inf>,'c,'v,plain>,int<8>),f,f,plain> v0, ref<int<8>,f,f,plain> v1) {return rec ref_array_element.{ref_array_element=fun(ref<ref<array<'a,'s>,'c,'v,plain>,f,f,plain> v0, ref<int<8>,f,f,plain> v1) {return ref_narrow(ref_deref(v0), dp_element(dp_root(type<array<'a,'s>>), ref_deref(v1)));}}(tuple_member_access(ref_deref(v0), 0, type<ref<array<'a,inf>,'c,'v,plain>>), int_add(tuple_member_access(ref_deref(v0), 1, type<int<8>>), ref_deref(v1)));}}(rec ptr_from_array.{ptr_from_array=fun(ref<ref<array<'a,'s>,'c,'v,plain>,f,f,plain> v0) {return tuple(ref_reinterpret(ref_deref(v0), type<array<'a,inf>>),0);}}(ref_deref(v1)), v6)), rec num_cast.{num_cast=fun(ref<'a,f,f,plain> v0, ref<type<'b>,f,f,plain> v1) {return cast<'b>(ref_deref(v0));}}(3, type<real<8>>))) {rec atomic_fetch_and_add.{atomic_fetch_and_add=fun(ref<ref<'a,f,'v,plain>,f,f,plain> v0, ref<'a,f,f,plain> v1) {return rec atomic.{atomic=fun(ref<ref<'a,f,'v,plain>,f,f,plain> v0, ref<(('a)=>bool),f,f,plain> v1, ref<(('a)=>'a),f,f,plain> v2) {'a v3 = ref_deref(ref_deref(v0)); if(ref_deref(v1)(ref_deref(ref_deref(v0)))) {ref_assign(ref_deref(v0), ref_deref(v2)(ref_deref(ref_deref(v0))));} else {}; return v3;}}(ref_deref(v0), bind(v2){rec id.{id=fun(ref<'a,f,f,plain> v0) {return ref_deref(v0);}}(true)}, bind(v3){gen_add(v3, ref_deref(v1))});}}(ref_deref(v5), 1);} else {};};};};};};}; merge_all();}}(v1, v2, v26, v27, v28, v29)})));}; return 0;}}),
	Entry Points:
		{},
	is C++:
		1
)